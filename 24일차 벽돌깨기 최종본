package mymain.blockgame;

import java.awt.Color;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;

import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.Timer;

import myutil.MyConstant;

public class 벽돌게임 extends JFrame {
	
	JPanel gamePan;
	//코딩순서 (2)
	Timer timer = null;
	//바
	Bar bar = new Bar();
	//볼(6)
	Ball ball = new Ball();
	//벽돌생성(8)
	Block [][] block_array = new Block[4][6];
	
	int block_count;
	
	int life_count=3;
	Font font = new Font("굴림체",Font.BOLD,25);
	

	public 벽돌게임() {
		// TODO Auto-generated constructor stub
		super("벽돌게임");

		//                  6            *            6
		block_count = block_array.length * block_array[0].length;
		
		init_gamePan();
		
		//타이머 초기화 (2)
		init_timer();
		//(3)
		init_Key_event();

		//바초기화(4)
		init_bar();
		
		//볼 초기화(6)
		init_ball();

		//블럭생성(8)
		init_block();
		
		
		this.setLocation(200, 100);

		
		//this.setSize(400, 400);
		pack();
		
		setResizable(false); 

		this.setVisible(true);

							
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	}




	//(8)
	private void init_block() {
		// TODO Auto-generated method stub
		
		int block_w = MyConstant.BlockGame.GAMEPAN_WIDTH/block_array[0].length;
		int block_h =30;
		
		//static변수로
		Block.width = block_w;
		Block.height = block_h;
		
		Color [] color_array = { Color.white, Color.black, Color.white, Color.black};
		
		for(int i = 0;i<block_array.length;i++){//행 첨자
			for(int k =0;k<block_array[i].length;k++){ //열 첨자
				
				Block block = new Block();
				block.pos.x = k*block_w;
				block.pos.y = i*block_h;
				
				block.color = color_array[(i+k)%color_array.length];
				
				block_array[i][k] = block;
				
				//어떤건 채우고 어떤건 안채우고
				//if(i==0||k==0)block.bShow=false;
			}
		}
		
	}
	//(6)
	private void init_ball() {
		// TODO Auto-generated method stub
		ball.pos.x = bar.pos.x + bar.width/2;//MyConstant.BlockGame.GAMEPAN_WIDTH/2;
		ball.pos.y = bar.pos.y - ball.radius;
	}
	//(4)
	private void init_bar() {
		// TODO Auto-generated method stub
		
		bar.color = Color.white;
		
		bar.width =600;
		bar.height =20;
		
		bar.pos.x =MyConstant.BlockGame.GAMEPAN_WIDTH/2 - bar.width/2;
		bar.pos.y =MyConstant.BlockGame.GAMEPAN_HEIGH - bar.height-5;
		
	}
	

	//(3)
	private void init_Key_event() {
		// TODO Auto-generated method stub
			
		this.addKeyListener(new KeyAdapter() {		
			
			@Override//익명 메소드
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
					
				super.keyPressed(e);
					
				int key = e.getKeyCode();
				
				if( key == KeyEvent.VK_S) {
						//게임시작(7) : s를 누르면 시작됨
						timer.start();
					
				}
				//(7)
				if( key == KeyEvent.VK_LEFT) {
					
					bar.key_state = bar.key_state | MyConstant.Key.LEFT;
					
				}else if (key == KeyEvent.VK_RIGHT) {	
					
					bar.key_state = bar.key_state | MyConstant.Key.RIGHT;
				}
			}
					
				/*}else if( key == KeyEvent.VK_UP) {
					
					bar.key_state = bar.key_state | MyConstant.Key.UP;
					
				}else if (key == KeyEvent.VK_DOWN) {	
					
					bar.key_state = bar.key_state | MyConstant.Key.DOWN;
				}	*/
				
			
			@Override
			public void keyReleased(KeyEvent e) {
				// TODO Auto-generated method stub
				//super.keyReleased(e);
				
				int key = e.getKeyCode();
						//(7)
				if( key == KeyEvent.VK_LEFT) {
					
					bar.key_state = bar.key_state ^ MyConstant.Key.LEFT;
					
				}else if (key == KeyEvent.VK_RIGHT) {	
					
					bar.key_state = bar.key_state ^ MyConstant.Key.RIGHT;
					
				}else if (key == KeyEvent.VK_RIGHT) {	
			}	
		}
	});
		
		
	}
	//(2)
	private void init_timer() {
		// TODO Auto-generated method stub
		
		ActionListener timer_listener = new ActionListener() {
			
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				process();
				
				gamePan.repaint();
				
			}
		};

		timer = new Timer(10, timer_listener);		
		
	}

	
	protected void process() {
		// TODO Auto-generated method stub
		
		//공 움직이기(6)
		ball.move();
		//바 움직이기(6)
		bar.move();
		//충돌체크하기
	
		//1. bar & block
		collision_bar_ball();
		
		//2. ball & blcok 충돌체크
		collision_ball_block();
	}
				
		


	private void collision_ball_block() {
		// TODO Auto-generated method stub
		
		//공이 올라갈때
		if(ball.bDown == false)
			collision_ball_up_block();
		else if (ball.bDown == true) //공이 내려올때
			collision_ball_down_block();
		
		if(ball.bRight) //공이 우측이동시
			collision_ball_right_block();
		else//공이 좌측 이동시
			collsion_ball_left_block();
		
	}




	private void collision_ball_right_block() {
		// TODO Auto-generated method stub
		int cx = ball.pos.x + ball.radius;
		int cy = ball.pos.y;
		
		int block_total_height = block_array.length * Block.height;
		
		//현재 공의 위치가 블럭영역 아래쪽에 있으면
		if(cy > block_total_height) return; 
		
		
		//현재 충돌지점의 좌표를 이용해서 블록의
		int row = cy / Block.height;
		int col = cx / Block.width;
		
		//첨자범위를 벗어나면 끝내라..
		if(col<0 || col >= block_array[0].length) return;
		if(row<0 || row >= block_array.length)return;
		
		//이미 깨져있으면 끝내라...
		if(block_array[row][col].bShow == false)return;
		
		//안깨졌으면 깨진상태로 변경
		block_array[row][col].bShow = false;
		
		//우 -> 좌
		ball.bRight = false;
		
		//현재 스테이지
		check_stage_clear();
	}




	private void collsion_ball_left_block() {
		// TODO Auto-generated method stub
		int cx = ball.pos.x - ball.radius;
		int cy = ball.pos.y;
		
		int block_total_height = block_array.length * Block.height;
		
		//현재 공의 위치가 블럭영역 아래쪽에 있으면
		if(cy > block_total_height) return; 
		
		
		//현재 충돌지점의 좌표를 이용해서 블록의
		int row = cy / Block.height;
		int col = cx / Block.width;
		
		//첨자범위를 벗어나면 끝내라..
		if(col<0 || col >= block_array[0].length) return;
		if(row<0 || row >= block_array.length)return;
		
		//이미 깨져있으면 끝내라...
		if(block_array[row][col].bShow == false)return;
		
		//안깨졌으면 깨진상태로 변경(위 -> 아래)
		block_array[row][col].bShow = false;
		
		ball.bRight = true;
		
		//현재 스테이지
		check_stage_clear();
	}




	private void collision_ball_down_block() {
		// TODO Auto-generated method stub
		
		int cx = ball.pos.x;
		int cy = ball.pos.y + ball.radius;
		
		int block_total_height = block_array.length * Block.height;
		
		//현재 공의 위치가 블럭영역 아래쪽에 있으면
		if(cy > block_total_height) return; 
		
		
		//현재 충돌지점의 좌표를 이용해서 블록의
		int row = cy / Block.height;
		int col = cx / Block.width;
		
		//첨자범위를 벗어나면 끝내라..
		if(col<0 || col >= block_array[0].length) return;
		if(row<0 || row >= block_array.length)return;
		
		//이미 깨져있으면 끝내라...
		if(block_array[row][col].bShow == false)return;
		
		//안깨졌으면 깨진상태로 변경(위 -> 아래)
		block_array[row][col].bShow = false;
		
		ball.bDown = false;
		
		//현재 스테이지
		check_stage_clear();
	}




	private void collision_ball_up_block() {
		// TODO Auto-generated method stub
		int cx = ball.pos.x;
		int cy = ball.pos.y - ball.radius;
		
	//right,left,down은 여기서
		
		int block_total_height = block_array.length * Block.height;
		
		//현재 공의 위치가 블럭영역 아래쪽에 있으면
		if(cy > block_total_height) return; 
		
		
		//현재 충돌지점의 좌표를 이용해서 블록의
		int row = cy / Block.height;
		int col = cx / Block.width;
		
		//첨자범위를 벗어나면 끝내라..
		if(col<0 || col >= block_array[0].length) return;
		if(row<0 || row >= block_array.length)return;
		
		//이미 깨져있으면 끝내라...
		if(block_array[row][col].bShow == false)return;
		
		//안깨졌으면 깨진상태로 변경(위 -> 아래)
		block_array[row][col].bShow = false;
		
	//여기까지 코드가 동일
		
		//공의 진행방향 변경
		ball.bDown = true;
		
		//현재 스테이지
		check_stage_clear();
	}




	private void check_stage_clear() {
		// TODO Auto-generated method stub
		block_count--;
		if(block_count==0){
			JOptionPane.showMessageDialog(this, "스테이지 클리어!");
		}
	}




	private void collision_bar_ball() {
		// TODO Auto-generated method stub
		
	
		if( ball.pos.x >= bar.pos.x && ball.pos.x<=(bar.pos.x+bar.width)
				 && ball.pos.y + ball.radius >= bar.pos.y	)
				{	
					ball.pos.y = bar.pos.y - ball.radius;//접점에 붙이려는 사항
					ball.bDown = false;
				}
		
		if((ball.pos.y + ball.radius) > MyConstant.BlockGame.GAMEPAN_HEIGH){
			
			life_count -= 1;
			
			System.out.println(block_count);
			init_bar();
			init_ball();
			gamePan.repaint();//초기화면으로
			
			timer.stop(); // 죽음
			
			
			if(life_count==0){
				//게임종료
				JOptionPane.showMessageDialog(this, "Game Over");
			}
		}

	}//collision_bar_ball - end
	
	//2.ball&block 충돌체크



	private void init_gamePan() {
		// TODO Auto-generated method stub
		
		gamePan = new JPanel() {

			@Override
			protected void paintComponent(Graphics g) {
				// TODO Auto-generated method stub
				super.paintComponent(g);
			
				//블럭그리기(8)
				draw_block(g);
				
				//(5)바 그리기
				bar.draw(g);
				
				//(6)
				ball.draw(g);
				
				//라이프 카운트
				draw_life_count(g);
			
			}

			private void draw_life_count(Graphics g) {
				// TODO Auto-generated method stub
				
				g.setColor(Color.red);
				g.setFont(font);
				
				for(int i=0;i<life_count;i++){
					g.drawString("♥", i * 20, MyConstant.BlockGame.GAMEPAN_HEIGH);
				}
			}
		};

		gamePan.setPreferredSize(new Dimension(MyConstant.BlockGame.GAMEPAN_WIDTH, 
											   MyConstant.BlockGame.GAMEPAN_HEIGH));
		
		this.add(gamePan); 
		
	}

	//(8)
	protected void draw_block(Graphics g) {
		// TODO Auto-generated method stub
		for(int i=0; i<block_array.length;i++){
			
			for(int k =0; k< block_array[i].length;k++){
				
				Block block = block_array[i][k];
				//안깨진 블록이면 보여줘라
				if(block.bShow)
						block.draw(g);
			}
		}
		
	}
	public static void main(String[] args) {
		// TODO Auto-generated method stub

		new 벽돌게임();
	}

}
