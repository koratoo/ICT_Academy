package mymain.multichat;

import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JList;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

import mymain.multichat.MultiServer.ReadThread;

public class MultiServer extends JFrame {

	//모니터 창
	JTextArea jta_display;
	
	//접속자 수
	JTextField jtf_user_count;
	
	//접속자 목록
	JList<String> jlist_user_list; 
	
	Font font = new Font("굴림체",Font.BOLD,16);
	
	//네트워크
	ServerSocket server;
	
	//자소켓을 관리할 객체 -> 접속자 수 관리
	List<ReadThread> socketList = new ArrayList<MultiServer.ReadThread>();
	
	//유저관리가 객체
	List<String>     userList   = new ArrayList<String>();
	
	public MultiServer() {
		super("멀티서버");

		//출력창 초기화
		init_display();
		
		//접속자 수 초기화
		init_user_count();
		
		//접속자 수 목록 초기화
		init_user_list();
		
		//display_message("솔저76 대기중...");
		//서버 초기화
		init_server();
		
		
		//위치
		this.setLocation(1000, 100);
		//크기
		//this.setSize(400, 400);
		pack();
		
		//보여주기
		this.setVisible(true);
		//종료
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	}

	private void init_server() {
		// TODO Auto-generated method stub
		
		try {//서버실패 
			//8000 열기
			server = new ServerSocket(8000);
			
			//8000번 포트로 제대로 열렸다는 표시
			display_message("서버 대기중...");
			
			//별도 쓰레드 생성 : 접속 대기 용도
			
			
			new Thread(){
				
				
				public void run(){
					while(true){//무한대기
				
						try{
							Socket child = server.accept();
				
							ReadThread rt = new ReadThread(child);
							rt.start();
							//자소켓을 포함한 쓰레드 객체를 Arraylist에 추가한다.
							socketList.add(rt);
							
							//접속자수 출력 메소드
							display_user_count();
							
							
						} catch (IOException e) {
							// TODO Auto-generated catch block
							e.printStackTrace();
						}//첫번째 요청자가 실패해도 다음 요청자가 가능하게 함
			
					}//end-while
	    
				};
				
	}.start();
	
		}catch(IOException e){
			e.printStackTrace();
		}
	}

	protected void display_user_count() {
		// TODO Auto-generated method stub
		//문자열 카운트
		jtf_user_count.setText(socketList.size()+"");
	}

	private void init_display() {
		// TODO Auto-generated method stub
		jta_display = new JTextArea();
		jta_display.setFont(font);
		
		JScrollPane jsp = new JScrollPane(jta_display);
		jsp.setPreferredSize(new Dimension(400,400));
		
		this.add(jsp,"Center");
		
		//읽기 전용
		jta_display.setEditable(false);
		
		
	}
	
	public void display_message(String message){
		
		jta_display.append(message);
		jta_display.append("\r\n");//줄바꿈
		
		int position = jta_display.getDocument().getLength();
		jta_display.setCaretPosition(position);//스크롤이 알아서 처리됨
		
	
	}
	
	

	private void init_user_list() {
		// TODO Auto-generated method stub
		jlist_user_list = new JList<String>();
		
		JScrollPane jsp = new JScrollPane(jlist_user_list);
		
		//높이는 이미 정의되어있음
		jsp.setPreferredSize(new Dimension(120,0));
		
		this.add(jsp,"East");
		
	}

	private void init_user_count() {
		// TODO Auto-generated method stub
		JPanel p = new JPanel(new GridLayout(1,3));
		
		JLabel jlb_user = new JLabel("접속자수: ",JLabel.RIGHT);
		
		jtf_user_count = new JTextField("0명");
		jtf_user_count.setFont(font);
		jtf_user_count.setHorizontalAlignment(JTextField.CENTER);
		
		
		JLabel jlb_count = new JLabel("(명)");
		jlb_count.setFont(font);
		
		p.add(jlb_user);
		p.add(jtf_user_count);
		p.add(jlb_count);
		
		
		this.add(p,"South");
		
		
	}

	public static void main(String[] args) {

		new MultiServer();
	}
	
	//멀티서버 내부클래스 선언영역..........
	class ReadThread extends Thread{
		
		Socket child;
		 
		
		BufferedReader br;
		
		public ReadThread(Socket child) {
			// TODO Auto-generated constructor stub
			super();
			this.child = child;
			
			try {
				
				
				
				InputStream is		  = child.getInputStream();
				
				
				InputStreamReader isr = new InputStreamReader(is);
				br					  = new BufferedReader(isr);
				
				
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
			
		}
		
		//child소켓의 수신대기용도 이용
		@Override
		public void run() {
			// TODO Auto-generated method stub
			
			while(true) {
				
				
				try {
					//1줄 단위로 수신
					String readData = br.readLine();
					
					
					if(readData==null) {
						
						//System.out.println("--정상종료--");
						break; //정상종료시(close)
					}
					
					//서버 모니터링...
					display_message(readData);
					
					//readData ="IN#홍길동"
					//readData ="OUT#홍길동"
					//readData = "MSG#홍길동#안녕하세요"
					//readData = "DRAW#10#50#20#0"
					
					//메세지 분류
					String [] msg_array = readData.split("#");
					
					//                         1      2     3    4   5 
					//String [] msg_array = {"IN" , "홍길동"};
					//String [] msg_array = {"msg", "홍길동", "안녕하세요"};
					//String [] msg_array = {"DRAW", "10", "50","20","0"};
					
					if(msg_array[0].equals("IN")){//입장이면
						
						//새로 접속한 유저명을 등록
						userList.add(msg_array[1]);
						//유저목록 JList출력
						display_user_list();
					
						// 서버 입장에서 모든 접속자에게 전송(동기화땜에 사용)
						send_message_all(readData + "\n"); 
						
						//현재 접속자 목록을 모든 사용자에게 전송
						send_user_list_all();
						
					
					}else{					
					//현재 메세지를 접속된 모든 사용자에게 전송해야된다.
						// 서버 입장에서 모든 접속자에게 전송
						send_message_all(readData + "\n"); 
					}
				
				} catch (IOException e) {
					// TODO Auto-generated catch block
					//e.printStackTrace();
					//비정상 종료시 (정전/프로그램 강제 종료...)
					//System.out.println("--비정상종료--");
					break;
				}
				
				
			} // end-while
			
			//소켓 종료시 처리..
			
			//현재 ArrayList에서 this의 위치를 구한다.
			int index = socketList.indexOf(this);
			
			//퇴장한 사용자의 닉네임
			String out_nickname = userList.get(index);
			
			
			//상대방 소켓이 끊긴 경우
			//내부 클래스는 외부 클래스의 모든걸 쓸 수 있음
			//현재 쓰레드를 소켓 리스트로부터 제거
			socketList.remove(index);//객체 자신을 뺀다는 의미
			
			display_user_count();//인원수 갱신정보 출력
			
			
			//접속자 목록 갱신
			userList.remove(index);
			display_user_list();
			
			//퇴장정보 전송
			String message = String.format("OUT#%s\n",out_nickname);
			send_message_all(message);
			
			//현재 접속자 목록을 모든 사용자에게 전송
			send_user_list_all();
			
		}// run - end
		
		
	}
//end ReadThread -------------------
		
			public void display_user_list() {
				// TODO Auto-generated method stub
				String[] user_array = new String[userList.size()];
				userList.toArray(user_array);
				
				jlist_user_list.setListData(user_array);
				
			}
		
			public void send_user_list_all() {
			// TODO Auto-generated method stub
			
				StringBuffer sb =new StringBuffer("LIST#"); 
				
				for(int i =0; i<userList.size();i++){
					String nickname = userList.get(i);
					
					//append: 선택된 요소의 마지막에 새로운 요소나 콘텐츠를 추가한다.
					sb.append("#");
					sb.append(nickname);
					
				}
				//toString은 문자열로 바꾸어 보낸다는 의미
				//System.out.println(sb.toString());
				send_message_all(sb.toString() + "\n");
				
				
			}
		
			public void send_message_all(String message) {
				// TODO Auto-generated method stub
				
				for(int i=0; i<socketList.size();i++){//i = 0 1 2
					
					//try ~ catch 못보내면 어떡할래?
					try {
						
						ReadThread rt = socketList.get(i);
						//메세지를 바이트 형태로 보낸다.
						rt.child.getOutputStream().write(message.getBytes());
						
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}
				
			}
			
			
			
		}


