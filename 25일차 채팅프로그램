package multicast;

	
//소켓 : 네트워크 라이브러리를 좀 더 쉽게 사용할 수 있게 함
import java.awt.Dimension;
import java.awt.Font;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.KeyAdapter;
import java.awt.event.KeyEvent;
import java.io.IOException;
import java.net.DatagramPacket;
import java.net.InetAddress;
import java.net.MulticastSocket;
import java.net.UnknownHostException;
import java.util.ArrayList;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;

public class MultiCastChat extends JFrame {

	JTextArea jta_display;
	
	//입력창
	JTextField jtf_message;
	
	JTextField jtf_address;
	
	//대화명
	String nickname = "kim";
	
	Font font = new Font("굴림체 ", Font.PLAIN,16);

	private MulticastSocket multicastSocket;
	
	//multicast group에 가입된 주소
	List<String> groupList = new ArrayList<String>();
	
	//East쪽에 목록 출력용 컴포넌트
	JList<String> jlist_group = new JList<String>();
	
	public MultiCastChat() {
		super("멀티캐스트");

		//출력창 초기화
		init_display();
		
		//입력창 초기화
		init_inputs();
		
		//그룹목록창 초기화
		init_group_list();
		
		//키 이벤트 초기화
		init_key_event();
		
		//소켓 초기화
		init_socket();
		
		//위치
		this.setLocation(200, 100);
		//크기
		this.setSize(400, 400);
		//보여주기
		this.setVisible(true);
		//종료
		this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

	}

	private void init_group_list() {
		// TODO Auto-generated method stub
		
		jlist_group.setFont(font);
		
		JScrollPane jsp = new JScrollPane(jlist_group);
		jsp.setPreferredSize(new Dimension(150,0));
		
		this.add(jsp,"East");
		
		//JList에 데이터 넣는 방법
		//String [] ip_array ={"224.0.0.1","224.0.0.2","224.0.0.3"};
		//jlist_group.setListData(ip_array);
		
		
	}

	//데이터는 소켓을 통해 입출력을 받는다.
	private void init_socket() {
		// TODO Auto-generated method stub
		
		try {
			//데이터 송수신
			multicastSocket = new MulticastSocket(5000);
			
			//별도의 작업자(쓰레드) 생성
			new Thread(){
				
				public void run(){
					//데이터 수신대기
					while(true){
						
						read_message();
					}
				}
				
			}.start(); //샌드위치 코드
			
			
			
			
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		
		
	}

	protected void read_message() {
		// TODO Auto-generated method stub

		//소켓을 통해서 수신
		try {
			byte[] read_buff = new byte[512];
			//읽어온 데이터를 넣을 버퍼를 지정
			DatagramPacket dp = new DatagramPacket(read_buff, read_buff.length);
			multicastSocket.receive(dp); //메세지가 도착할때까지 대기중
			
			//전송지 주소
			InetAddress you_ia =dp.getAddress();
			
			//읽어온 데이터 가져오기 => String객체로 생성 =>"홍길동#안녕하세요"(read data)
			//trim은 공백제거
			String read_data = new String(dp.getData()).trim();
			
			//#을 기준으로 분리									0		1
			//String [] read_data_array = read_data.split("홍길동","안녕하세요");
			String [] read_data_array = read_data.split("#");
			
			//출력메세지 생성
			String display_message = String.format("[%s]님 말씀: %s\r\n",
					read_data_array[0],read_data_array[1]);
			
			jta_display.append(display_message);
			
			//전체길이 구하기 스크롤 제일아래 메세지가 화면에 구현
			int position = jta_display.getDocument().getLength();
			jta_display.setCaretPosition(position);
			
			System.out.printf("[%s]%s",you_ia.getHostAddress(),display_message);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
	}

	private void init_key_event() {
		// TODO Auto-generated method stub
		jtf_message.addKeyListener(new KeyAdapter() {
			
			@Override
			public void keyPressed(KeyEvent e) {
				// TODO Auto-generated method stub
				int key = e.getKeyCode();
				
				if(key == KeyEvent.VK_ENTER){
					send_message();
				}	
			}
		});
		
	}
//246
	protected void send_message() {
		// TODO Auto-generated method stub
		
		//입력 메세지를 읽어온다 : 공백제거
		String message = jtf_message.getText();//.trim();
		
		//비어있는가?
		if(message.isEmpty()){
			JOptionPane.showMessageDialog(this,"메세지를 입력하세요");
			jtf_message.setText(""); // 값 비우기
			return;
		}
		
		//네트워크로 전송
		String ip = jtf_address.getText().trim(); //trim은 공백제거
		if(ip.isEmpty()){
			JOptionPane.showMessageDialog(this,"전송지 주소를 입력하세요");
			jtf_message.setText("255.255.255.255"); // 값 비우기
			return;
		}
		
		//DatagramPacket : Data + 주소(InetAddress)
		//패킷 : 1회 전송
		try {
			InetAddress ia = InetAddress.getByName(ip);
			
			//전송데이터 포장 : nickname#message send_data ="nickname#message"
			String send_data = String.format("%s#%s",nickname,message);
			//String -> byte[] 추출
			byte[] send_bytes = send_data.getBytes();
			DatagramPacket dp = new DatagramPacket(send_bytes, send_bytes.length, ia, 5000);
			
			//소켓을 통해서 전송
			multicastSocket.send(dp);
			
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		
		/*//출력
		//[홍길동]님 말씀: 안녕하세요..
		String display_message = String.format("[%s]님 말씀 : %s\r\n", nickname, message);
		jta_display.append(display_message);
		//전체 문서의 길이를 구한다.
		int position = jta_display.getDocument().getLength();
		//최근에 전송된 메세지가 화면에 보여짐
		jta_display.setCaretPosition(position);*/
		
		
		
		jtf_message.setText("");//입력메세지 지우기
			
		
	}

	private void init_inputs() {
		// TODO Auto-generated method stub
		JPanel p = new JPanel(new GridLayout(3,1));
		
		//jtf_address =new JTextField("255.255.255.255");//글로벌 브로드캐스트 주소
		jtf_address =new JTextField("224.0.0.1");//글로벌 브로드캐스트 주소
		jtf_address.setFont(font);
		
		//2번째 줄 : 가입 / 탈퇴버튼
		JPanel p1 = new JPanel(new GridLayout(1,2));
		JButton jbt_join = new JButton("가입");
		JButton jbt_leave = new JButton("탈퇴");
		jbt_join.setFont(font);
		jbt_leave.setFont(font);
		
		p1.add(jbt_join);
		p1.add(jbt_leave);
		
		//3번째 줄 : 메세지 창
		jtf_message = new JTextField();
		jtf_message.setFont(font);
		
		p.add(jtf_address);
		p.add(p1);
		p.add(jtf_message);
		
		this.add(p,"South");
		
		//버튼 이벤트 등록
		jbt_join.addActionListener(new ActionListener() {
			//액션이 발생하면 오버라이드 한 객체로 이동
			@Override
			public void actionPerformed(ActionEvent e) {
				// TODO Auto-generated method stub
				//콜백 자동호출 메소드
				on_button_join();
			}
		});
		
		//탈퇴버튼 클릭
		//람다식
		jbt_leave.addActionListener( e-> { on_button_leave();  });
		
		
		
	}

	protected void on_button_join() {
		// TODO Auto-generated method stub
		//System.out.println("가입하기");
	
		//1.주소 읽어오기
		String ip = jtf_address.getText().trim();
		if(ip.isEmpty()){
			JOptionPane.showMessageDialog(this, "가입할 주소를 입력하세요.");
			jtf_address.setText("224.0.0.1");
			return;
		}
		
		//(기)가입여부 확인 => ArrayList내에 ip가 존재하는가?
		if(groupList.contains(ip)){
			JOptionPane.showMessageDialog(this, "이미 가입된 주소입니다.");
			return;
		}
	
		//가입하기
		try {
			
			//네트워크상 가입성공
			InetAddress ia = InetAddress.getByName(ip);
			multicastSocket.joinGroup(ia);
			
			//가입된 주소를 ArrayList에 넣는다.
			groupList.add(ip);
			
			//오른쪽 JList창 갱신
			update_group_list();
			
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}

	private void update_group_list() {
		// TODO Auto-generated method stub
		
		//ArrayList -> Array추출
		String[] group_array = new String[groupList.size()];
		groupList.toArray(group_array);
		
		jlist_group.setListData(group_array);
		
	}

	private void on_button_leave() {
		// TODO Auto-generated method stub
		System.out.println("탈퇴하기");
	}

	private void init_display() {
		// TODO Auto-generated method stub
		jta_display =new JTextArea();
		
		JScrollPane jsp = new JScrollPane(jta_display);
		
		jsp.setPreferredSize(new Dimension(400,300));
		
		this.add(jsp);//,"Center"
		
		//jta_display 읽기 전용
		jta_display.setEditable(false);
		
		jta_display.setFont(font);
		
		//
	}

	public static void main(String[] args) {

		new MultiCastChat();
	}

}
